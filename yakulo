#!/usr/bin/env python
#-*- coding: utf-8 -*-


import os
import sys
import time
import optparse
import subprocess


FILE_PATH = '~/.yakulo'
VERSION = '0.1'


def load_script(filename):
    f = open(filename)
    result = []
    create = None
    name = ''
    lst = []
    for line in f:
        if line.startswith('#') or not line.strip():
            pass
        elif line.startswith(':'):
            if name:
                result.append([create, name, lst])
            parts = line.split(' ', 1)
            create = parts[0][1:].lower() != 'rename'
            name = parts[1].strip()
            lst = []
        else:
            lst.append(line.strip())
    result.append([create, name, lst])
    f.close()
    return result


def cmd(args):
    output = subprocess.Popen([str(i) for i in args], stdout=subprocess.PIPE).communicate()[0]
    return output


class Yakuake(object):
    @staticmethod
    def get():
        return DbusCmdYakuake()

    def show(self):
        pass
    
    def addSession(self):
        pass
    
    def getCurrent(self):
        pass
    
    def setName(self, nr, name):
        pass
    
    def runCommand(self, nr, command):
        pass


class DcopCmdYakuake(Yakuake):
    def show(self):
        active = cmd('dcop yakuake yakuake-mainwindow#1 isActiveWindow'.split()).strip()
        if active == 'false':
            cmd('dcop yakuake DCOPInterface slotToggleState'.split())
    
    def addSession(self):
        cmd('dcop yakuake DCOPInterface slotAddSession'.split())
    
    def getCurrent(self):
        nr = cmd('dcop yakuake DCOPInterface selectedSession'.split())
        return int(nr.strip())
    
    def setName(self, nr, name):
        cmd('dcop yakuake DCOPInterface slotRenameSession'.split() + [nr, name])
    
    def getName(self, nr):
        return cmd('dcop yakuake DCOPInterface slotSessionName'.split() + [nr]).rstrip()
    
    def runCommand(self, nr, command):
        cmd('dcop yakuake DCOPInterface slotRunCommandInSession'.split() + [nr, command])

    def enterText(self, text):
        cmd('dcop klipper klipper setClipboardContents'.split() + [text+ '\n'])
        cmd('dcop yakuake DCOPInterface slotPasteClipboard'.split())
    
    def getAll(self):
        lst = cmd('dcop yakuake DCOPInterface sessionIdList'.split())
        return [int(i) for i in lst.strip().split(',')]


class DbusCmdYakuake(Yakuake):
    def show(self):
        pass
    
    def addSession(self):
        cmd('qdbus org.kde.yakuake /yakuake/sessions addSession'.split())
    
    def getCurrent(self):
        nr = cmd('qdbus org.kde.yakuake /yakuake/sessions activeSessionId'.split())
        return int(nr.strip())
    
    def setName(self, nr, name):
        cmd('qdbus org.kde.yakuake /yakuake/tabs setTabTitle'.split() + [nr, name])
    
    def getName(self, nr):
        return cmd('qdbus org.kde.yakuake /yakuake/tabs tabTitle'.split() + [nr]).rstrip()
    
    def runCommand(self, nr, command):
        tid = cmd('qdbus org.kde.yakuake /yakuake/sessions terminalIdsForSessionId'.split() + [nr]).split(',')[0].strip()
        cmd('qdbus org.kde.yakuake /yakuake/sessions runCommandInTerminal'.split() + [tid, command])

    def enterText(self, text):
        nr = cmd('qdbus org.kde.yakuake /yakuake/sessions activeSessionId'.split())
        tid = cmd('qdbus org.kde.yakuake /yakuake/sessions terminalIdsForSessionId'.split() + [nr]).split(',')[0]
        cmd('qdbus org.kde.yakuake /yakuake/sessions runCommandInTerminal'.split() + [tid, text])
    
    def getAll(self):
        return []


def load(script):
    yaku = Yakuake.get()
    
    yaku.show()
    
    for create, name, commands in script:
        if create:
            yaku.addSession()
        nr = yaku.getCurrent()
        yaku.setName(nr, name)
        for command in commands:
            if command.startswith('yak-sleep'):
                sleep = float((command.split() + ['1.0'])[1])
                time.sleep(sleep)
            elif command.startswith('yak-enter'):
                yaku.enterText(command.split(' ', 1)[-1])
            else:
                yaku.runCommand(nr, command)


if __name__ == '__main__':
    parser = optparse.OptionParser(usage="usage: %prog [options] [scripts]")

    parser.version = '%prog version ' + VERSION
    parser.add_option("-v", "--version", action="version", help="show version")

    parser.add_option("-p", "--parse",
         action="store_true",
         dest="parse",
         default=False,
         help="print parsed script to stdout and exit"
    )

    (options, args) = parser.parse_args()
    
    name = 'default' if len(args) == 0 else args[0]
    path = os.path.join(os.path.expanduser(FILE_PATH), name)
    script = load_script(path)
    
    if options.parse:
        print script
    else:
        load(script)

