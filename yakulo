#!/usr/bin/env python
#-*- coding: utf-8 -*-


import os
import sys
import time
import optparse
import urllib2
import subprocess


FILE_PATH = '~/.yakulo'
VERSION = '0.2'


def read_lines(name):
    if name.startswith(('http://', 'ftp://')):
        f = urllib2.urlopen(name)
        data = f.read()
        f.close()
    else:
        if '/' in name:
            path = os.path.abspath(os.path.expanduser(name))
        else:
            path = os.path.join(os.path.expanduser(FILE_PATH), name)
        
        f = open(path)
        data = f.read()
        f.close()
    
    return data.splitlines()


def read_scripts(filenames):
    result = [[None, []]]
    
    for filename in filenames:
        for line in read_lines(filename):
            striped = line.strip()
            if striped.startswith('#') or not striped:
                pass
            elif striped.startswith(':include'):
                script = read_scripts(line.split()[1:])
                if script[0][0] is None:
                    result[-1][1].extend(script[0][1])
                    script = script[1:]
                result.extend(script)
            elif line.startswith(':tab'):
                if result[-1] == [None, []]:
                    result.pop()
                result.append([line.split(' ', 1)[1].strip(), []])
            else:
                result[-1][1].append(line.strip())
    
    return result
    
def format_script(script):
    for name, commands in script:
        print ':tab', name
        for command in commands:
            print '    %s' % command
    


def cmd(args):
    output = subprocess.Popen([str(i) for i in args], stdout=subprocess.PIPE).communicate()[0]
    return output


class Yakuake(object):
    @staticmethod
    def get():
        return DbusCmdYakuake()

    def show(self):
        pass
    
    def addSession(self):
        pass
    
    def getCurrent(self):
        pass
    
    def setName(self, nr, name):
        pass
    
    def runCommand(self, nr, command):
        pass


class DcopCmdYakuake(Yakuake):
    def show(self):
        active = cmd('dcop yakuake yakuake-mainwindow#1 isActiveWindow'.split()).strip()
        if active == 'false':
            cmd('dcop yakuake DCOPInterface slotToggleState'.split())
    
    def addSession(self):
        cmd('dcop yakuake DCOPInterface slotAddSession'.split())
    
    def getCurrent(self):
        nr = cmd('dcop yakuake DCOPInterface selectedSession'.split())
        return int(nr.strip())
    
    def setName(self, nr, name):
        cmd('dcop yakuake DCOPInterface slotRenameSession'.split() + [nr, name])
    
    def getName(self, nr):
        return cmd('dcop yakuake DCOPInterface slotSessionName'.split() + [nr]).rstrip()
    
    def runCommand(self, nr, command):
        cmd('dcop yakuake DCOPInterface slotRunCommandInSession'.split() + [nr, command])

    def enterText(self, text):
        cmd('dcop klipper klipper setClipboardContents'.split() + [text+ '\n'])
        cmd('dcop yakuake DCOPInterface slotPasteClipboard'.split())
    
    def getAll(self):
        lst = cmd('dcop yakuake DCOPInterface sessionIdList'.split())
        return [int(i) for i in lst.strip().split(',')]


class DbusCmdYakuake(Yakuake):
    def show(self):
        pass
    
    def addSession(self):
        cmd('qdbus org.kde.yakuake /yakuake/sessions addSession'.split())
    
    def getCurrent(self):
        nr = cmd('qdbus org.kde.yakuake /yakuake/sessions activeSessionId'.split())
        return int(nr.strip())
    
    def setName(self, nr, name):
        cmd('qdbus org.kde.yakuake /yakuake/tabs setTabTitle'.split() + [nr, name])
    
    def getName(self, nr):
        return cmd('qdbus org.kde.yakuake /yakuake/tabs tabTitle'.split() + [nr]).rstrip()
    
    def runCommand(self, nr, command):
        tid = cmd('qdbus org.kde.yakuake /yakuake/sessions terminalIdsForSessionId'.split() + [nr]).split(',')[0].strip()
        cmd('qdbus org.kde.yakuake /yakuake/sessions runCommandInTerminal'.split() + [tid, command])

    def enterText(self, text):
        nr = cmd('qdbus org.kde.yakuake /yakuake/sessions activeSessionId'.split())
        tid = cmd('qdbus org.kde.yakuake /yakuake/sessions terminalIdsForSessionId'.split() + [nr]).split(',')[0]
        cmd('qdbus org.kde.yakuake /yakuake/sessions runCommandInTerminal'.split() + [tid, text])
    
    def getAll(self):
        return []


def load(script, new):
    yaku = Yakuake.get()
    yaku.show()
    
    for  name, commands in script:
        if new:
            yaku.addSession()
        new = True
        
        nr = yaku.getCurrent()
        if name is not None:
            yaku.setName(nr, name)
        
        for command in commands:
            if command.startswith('yak-sleep'):
                sleep = float((command.split() + ['1.0'])[1])
                time.sleep(sleep)
            elif command.startswith('yak-enter'):
                yaku.enterText(command.split(' ', 1)[-1])
            else:
                yaku.runCommand(nr, command)


if __name__ == '__main__':
    parser = optparse.OptionParser(usage="usage: %prog [options] [scripts]")

    parser.version = '%prog version ' + VERSION
    parser.add_option("-v", "--version", action="version", help="show version")

    parser.add_option("-p", "--parse",
         action="store_true",
         dest="parse",
         default=False,
         help="print parsed script to stdout and exit"
    )
    parser.add_option("-n", "--new",
         action="store_true",
         dest="new",
         default=False,
         help="create new session for first tabs"
    )
    
    (options, args) = parser.parse_args()
    
    names = ['default'] if len(args) == 0 else args
    script = read_scripts(names)
    
    if options.parse:
        format_script(script)
    else:
        if not options.new:
            try:
                pid = os.fork()
            except OSError, e:
                raise Exception, "%s [%d]" % (e.strerror, e.errno)
            
            if pid != 0:
                os._exit(0)
        
        load(script, options.new)

